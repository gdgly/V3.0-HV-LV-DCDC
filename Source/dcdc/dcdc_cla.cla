///////////////////////////////////////////////////////////////////////////////
//
// CLA file
//
///////////////////////////////////////////////////////////////////////////////

//
// Included Files
//
#include "driverlib.h"
#include "device.h"
#include "dcdc.h"


#define DCDC_LPF_ALPHA_OUTPUT_CURRENT 0.5f // f_cutoff = 7.72kHz at 70kHz sampling frequency
#define DCDC_LPF_ALPHA_OUTPUT_VOLTAGE 0.5f // f_cutoff = 7.72kHz at 70kHz sampling frequency

// TODO: ALL these values are placeholders.
#define DCDC_CLA_VOLTAGE_SETPOINT        54.0f
#define DCDC_CLA_VOLTAGE_SETPOINT_RAW    ((DCDC_CLA_VOLTAGE_SETPOINT - DCDC_CALIBRATION_V_OUT_OFFSET_DEFAULT) \
                                         / DCDC_CALIBRATION_V_OUT_SLOPE_DEFAULT)

#define DCDC_CLA_VOLTAGE_COMPENSATOR_A0  1.0f
#define DCDC_CLA_VOLTAGE_COMPENSATOR_A1  1.0f
#define DCDC_CLA_VOLTAGE_COMPENSATOR_A2  1.0f
#define DCDC_CLA_VOLTAGE_COMPENSATOR_B1  1.0f
#define DCDC_CLA_VOLTAGE_COMPENSATOR_B2  1.0f

#define DCDC_CLA_VOLTAGE_LOOP_OUTPUT_MIN 0.0f
#define DCDC_CLA_VOLTAGE_LOOP_OUTPUT_MAX 1.0f


#define DCDC_CLA_CURRENT_COMPENSATOR_A0  1.0f
#define DCDC_CLA_CURRENT_COMPENSATOR_A1  1.0f
#define DCDC_CLA_CURRENT_COMPENSATOR_A2  1.0f
#define DCDC_CLA_CURRENT_COMPENSATOR_B1  1.0f
#define DCDC_CLA_CURRENT_COMPENSATOR_B2  1.0f

#define DCDC_CLA_CURRENT_LOOP_OUTPUT_MIN 0.0f
#define DCDC_CLA_CURRENT_LOOP_OUTPUT_MAX 1.0f


struct dcdc_cla_2p2z
{
    float32_t x1;
    float32_t x2;
    float32_t y1;
    float32_t y2;
};


static float32_t dcdc_cla_i_out_raw_filtered;
static float32_t dcdc_cla_v_out_1_raw_filtered;
static float32_t dcdc_cla_v_out_2_raw_filtered;

static struct dcdc_cla_2p2z dcdc_cla_voltage_compensator;
static struct dcdc_cla_2p2z dcdc_cla_current_compensator;


//
//
//
static inline void dcdc_cla_profiling_pin_set(void)
{
    HWREG(GPIODATA_BASE  + GPIO_O_GPASET) = (1UL << 22);
}

//
//
//
static inline void dcdc_cla_profiling_pin_clear(void)
{
    HWREG(GPIODATA_BASE  + GPIO_O_GPACLEAR) = (1UL << 22);
}

//
//
//
static inline void dcdc_cla_adc_filter(void)
{
    float32_t temp;

    float32_t i_out_raw = (float32_t)DCDC_ADC_RESULT_OUTPUT_CURRENT;
    temp = i_out_raw * DCDC_LPF_ALPHA_OUTPUT_CURRENT;
    temp += (dcdc_cla_i_out_raw_filtered * (1.0f - DCDC_LPF_ALPHA_OUTPUT_CURRENT));
    dcdc_cla_i_out_raw_filtered = temp;

    float32_t v_out_1_raw = (float32_t)DCDC_ADC_RESULT_OUTPUT_VOLTAGE_1;
    temp = v_out_1_raw * DCDC_LPF_ALPHA_OUTPUT_VOLTAGE;
    temp += (dcdc_cla_v_out_1_raw_filtered * (1.0f - DCDC_LPF_ALPHA_OUTPUT_VOLTAGE));
    dcdc_cla_v_out_1_raw_filtered = temp;

    float32_t v_out_2_raw = (float32_t)DCDC_ADC_RESULT_OUTPUT_VOLTAGE_2;
    temp = v_out_2_raw * DCDC_LPF_ALPHA_OUTPUT_VOLTAGE;
    temp += (dcdc_cla_v_out_2_raw_filtered * (1.0f - DCDC_LPF_ALPHA_OUTPUT_VOLTAGE));
    dcdc_cla_v_out_2_raw_filtered = temp;
}

//
//
//
static inline float32_t dcdc_cla_voltage_compensator_execute(void)
{
    float32_t x0;
    float32_t y0;
    float32_t temp;

    // TODO: How do we use dcdc_cla_v_out_2_raw_filtered?
    x0 = DCDC_CLA_VOLTAGE_SETPOINT_RAW - dcdc_cla_v_out_1_raw_filtered;
    // TODO: Dynamic gain depending on error?
    temp = x0 * dcdc_cpu_to_cla_mem.voltage_loop_gain;
    temp *= DCDC_CLA_VOLTAGE_COMPENSATOR_A0;
    temp += (dcdc_cla_voltage_compensator.x1 * DCDC_CLA_VOLTAGE_COMPENSATOR_A1);
    temp += (dcdc_cla_voltage_compensator.x2 * DCDC_CLA_VOLTAGE_COMPENSATOR_A2);
    temp -= (dcdc_cla_voltage_compensator.y1 * DCDC_CLA_VOLTAGE_COMPENSATOR_B1);
    temp -= (dcdc_cla_voltage_compensator.y2 * DCDC_CLA_VOLTAGE_COMPENSATOR_B2);

    temp = __mmaxf32(temp, DCDC_CLA_VOLTAGE_LOOP_OUTPUT_MIN);
    temp = __mminf32(temp, DCDC_CLA_VOLTAGE_LOOP_OUTPUT_MAX);

    y0 = temp;

    dcdc_cla_voltage_compensator.x2 = dcdc_cla_voltage_compensator.x1;
    dcdc_cla_voltage_compensator.x1 = x0;
    dcdc_cla_voltage_compensator.y2 = dcdc_cla_voltage_compensator.y1;
    dcdc_cla_voltage_compensator.y1 = y0;

    return y0;
}

//
//
//
static inline float32_t dcdc_cla_current_compensator_execute(float32_t v_loop_output)
{
    float32_t x0;
    float32_t y0;
    float32_t temp;

    float32_t current_setpoint_raw =
            v_loop_output * dcdc_cpu_to_cla_mem.current_setpoint_max_raw;
    x0 = current_setpoint_raw - dcdc_cla_i_out_raw_filtered;
    temp = x0 * dcdc_cpu_to_cla_mem.current_loop_gain;
    temp *= DCDC_CLA_CURRENT_COMPENSATOR_A0;
    temp += (dcdc_cla_current_compensator.x1 * DCDC_CLA_CURRENT_COMPENSATOR_A1);
    temp += (dcdc_cla_current_compensator.x2 * DCDC_CLA_CURRENT_COMPENSATOR_A2);
    temp -= (dcdc_cla_current_compensator.y1 * DCDC_CLA_CURRENT_COMPENSATOR_B1);
    temp -= (dcdc_cla_current_compensator.y2 * DCDC_CLA_CURRENT_COMPENSATOR_B2);

    temp = __mmaxf32(temp, DCDC_CLA_CURRENT_LOOP_OUTPUT_MIN);
    temp = __mminf32(temp, DCDC_CLA_CURRENT_LOOP_OUTPUT_MAX);

    y0 = temp;

    dcdc_cla_current_compensator.x2 = dcdc_cla_current_compensator.x1;
    dcdc_cla_current_compensator.x1 = x0;
    dcdc_cla_current_compensator.y2 = dcdc_cla_current_compensator.y1;
    dcdc_cla_current_compensator.y1 = y0;

    return y0;
}

//
//
//
static inline float32_t dcdc_cla_open_loop_control_execute(void)
{

    return (float32_t)dcdc_cpu_to_cla_mem.open_loop_primary_period.cla * 0.01f;
}

//
//
//
static inline float32_t dcdc_cla_soft_start_control_execute(void)
{
    // TODO: Soft start on bus voltage setpoint or on current setpoint
    float32_t v_loop_output = dcdc_cla_voltage_compensator_execute();
    float32_t i_loop_output = dcdc_cla_current_compensator_execute(v_loop_output);
    return i_loop_output;
}

//
//
//
static inline float32_t dcdc_cla_closed_loop_control_execute(void)
{
    float32_t v_loop_output = dcdc_cla_voltage_compensator_execute();
    float32_t i_loop_output = dcdc_cla_current_compensator_execute(v_loop_output);
    return i_loop_output;
}

//
//
//
static inline float32_t dcdc_cla_control_execute(void)
{
    float32_t duty = 0.0f;

    switch (dcdc_cpu_to_cla_mem.dcdc_state.cla)
    {
        case DCDC_STATE_OPEN_LOOP:
            duty = dcdc_cla_open_loop_control_execute();
            break;
        case DCDC_STATE_WAITING_FOR_SOFT_START_TO_FINISH:
            duty = dcdc_cla_soft_start_control_execute();
            break;
        case DCDC_STATE_NORMAL:
            duty = dcdc_cla_closed_loop_control_execute();
            break;
        default:
            break;
    }

    return duty;
}

//
//
//
static inline void dcdc_cla_pwm_update(float32_t duty)
{
    uint16_t cmpa_value = (uint16_t)((duty * EPWM1_PERIOD_MAX) + 0.5f);
    EPWM_setCounterCompareValue(EPWM1_BASE, EPWM_COUNTER_COMPARE_A, cmpa_value);
    EPWM_setCounterCompareValue(EPWM2_BASE, EPWM_COUNTER_COMPARE_A, cmpa_value);
}




//
//
//
__attribute__((interrupt)) void dcdc_cla_task_1(void)
{
    dcdc_cla_profiling_pin_set();

    dcdc_cla_adc_filter();

    float32_t duty = dcdc_cla_control_execute();
    dcdc_cla_pwm_update(duty);


    dcdc_cla_profiling_pin_clear();
}

//
//
//
__attribute__((interrupt)) void dcdc_cla_initialization_task(void)
{
    dcdc_cla_i_out_raw_filtered = 0.0f;
    dcdc_cla_v_out_1_raw_filtered = 0.0f;
    dcdc_cla_v_out_2_raw_filtered = 0.0f;

    dcdc_cla_voltage_compensator.x1 = 0.0f;
    dcdc_cla_voltage_compensator.x2 = 0.0f;
    dcdc_cla_voltage_compensator.y1 = 0.0f;
    dcdc_cla_voltage_compensator.y2 = 0.0f;

    dcdc_cla_current_compensator.x1 = 0.0f;
    dcdc_cla_current_compensator.x2 = 0.0f;
    dcdc_cla_current_compensator.y1 = 0.0f;
    dcdc_cla_current_compensator.y2 = 0.0f;
}
